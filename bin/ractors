#!/usr/bin/env ruby
require_relative "env.rb"
require "pry"

sim_path =
  case ARGV[0]
  when nil, ""
    case ENV["RETIRELATOR_SIMULATION"]
    when nil, ""
      puts "Missing required path to sim_path configuration"
      exit
    else
      ENV["RETIRELATOR_SIMULATION"]
    end
  else
    ARGV[0]
  end

sim_params = YAML.load_file(sim_path)

puts "Setting up params for each sim"
params_list = [sim_params.merge("noise" => 0).freeze]
99.times do
  params_list << sim_params.merge("rand_seed" => Random.new.seed)
end

groups = 10.times.map { Array.new }
params_list.each_with_index do |params, i|
  groups[i % groups.count] << params
end

ractors = groups.map do |work|
  Ractor.new(work.freeze) do |work_list|
    buffer = StringIO.new
    logger = Logger.new(buffer)
    work_list.each do |params|
      simulation = Retirelator.from_params(params, logger: logger)
      simulation.simulate!
      balance = simulation.accounts.map(&:balance).sum
      Ractor.yield "Seed: #{simulation.noiser.seed.to_s.rjust(39)}. Balance: #{simulation.to_currency(balance).rjust(20)}."
    end
  end
end

loop do
  taken = 0
  ractors.each do |a|
    result = a.take
    if result && !result.empty?
      puts result
      taken += 1
    end
  end
  break if taken == 0
end
